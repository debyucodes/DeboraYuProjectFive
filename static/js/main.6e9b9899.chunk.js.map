{"version":3,"sources":["Button.js","App.js","serviceWorker.js","index.js"],"names":["Button","state","alert","className","onClick","this","dislikeClick","Component","App","dog","axios","url","method","responseType","params","api_key","format","hasImage","then","results","console","log","data","setState","src","alt","name","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","crossorigin","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kSAoDeA,G,wDA/Cb,aAAe,IAAD,8BACZ,gBAEKC,MAAO,GAHA,E,2DAOZC,MAAM,6B,+BA8BN,OACE,6BACE,4BAAQC,UAAU,UAAUC,QAASC,KAAKC,cAA1C,WACA,4BAAQH,UAAU,QAAlB,e,GAzCaI,cC2ENC,E,kDAzDb,aAAe,IAAD,8BACZ,gBAEKP,MAAO,CACVQ,IAAK,IAJK,E,gEAYO,IAAD,OAClBC,IAAM,CACJC,IAAK,6CACLC,OAAQ,MACRC,aAAc,OACdC,OAAQ,CACNC,QAAS,uCACTC,OAAQ,OACRC,UAAU,KAEXC,MAAK,SAACC,GACPC,QAAQC,IAAIF,GACZC,QAAQC,IAAIF,EAAQG,KAAK,GAAGX,KAE5B,EAAKY,SAAS,CACZd,IAAKU,EAAQG,KAAK,U,+BAQtB,OACE,yBAAKnB,UAAU,OAGb,yBAAKA,UAAU,iBACb,6CAAkB,uBAAGA,UAAU,gBAE/B,yBAAKA,UAAU,kBACb,yBAAKqB,IAAKnB,KAAKJ,MAAMQ,IAAIE,IAAKc,IAAK,MAErC,4BAAKpB,KAAKJ,MAAMQ,IAAIiB,MACpB,kBAAC,EAAD,Y,GA/CQnB,aCTEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MACA,4BAAQV,IAAI,4CAA4CW,YAAY,eAEtEC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.6e9b9899.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\n\nclass Button extends Component {\n  constructor() {\n    super();\n\n    this.state ={}\n  }\n\n  dislikeClick(){\n    alert(\"Well, you're a monster!\");\n  }\n\n  // refreshPage() {\n  //   window.location.reload(false);\n  \n\n  // componentDidMount() {\n\n  //   axios({\n  //     url: 'https://api.thedogapi.com/v1/images/search',\n  //     method: 'GET',\n  //     responseType: 'json',\n  //     params: {\n  //       api_key: '8769c416-f65c-4a98-9456-5478f789a049',\n  //       format: 'json',\n  //       hasImage: true,\n  //     }\n  //   }).then((results) => {\n  //     console.log(results);\n  //     console.log(results.data[0].url);\n\n  //     this.setState({\n  //       dog: results.data[0],\n  //     })\n  //   })\n\n  // }\n\n  render() {\n    return(\n      <div>\n        <button className=\"dislike\" onClick={this.dislikeClick}>Dislike</button>\n        <button className=\"like\"> Like </button>\n\n      </div>\n    )\n  }\n}\n\nexport default Button;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport Button from './Button';\n// import { fas fa-paw } from '@fortawesome/react-fontawesome';\n\n\n\n// The dog API - key: 8769c416-f65c-4a98-9456-5478f789a049\n\n// Use axios to make API call\n// Put return from the API call into state\n  // - constructor with this.state\n// Prompt a random image of dog, and user can up or down vote the image\n// Voting system to upvote or downvote a dog photo - prompt \"you're a monster\" when user downvote \n// Make a search bar for user to search by breed\n// style to look similar to dating apps, display dog image and breed name etc \n//Every time you like a photo, toggle \"it's a match overlay\" alert \n\n\n//my attempt to make an axios call \nclass App extends Component {\n  constructor() {\n    super();\n    //create an array for easier access specific data\n    this.state ={\n      dog: [],\n    }\n  }\n\n  // library.add()\n\n\n  // make an axios call to api to search for a random dog to display on page\n  componentDidMount() {\n    axios({\n      url: 'https://api.thedogapi.com/v1/images/search',\n      method: 'GET',\n      responseType: 'json',\n      params: {\n        api_key: '8769c416-f65c-4a98-9456-5478f789a049',\n        format: 'json',\n        hasImage: true,\n      }\n    }).then((results) => {\n      console.log(results);\n      console.log(results.data[0].url);\n\n      this.setState({\n        dog: results.data[0],\n      })\n    })\n  }\n\n\n  render() {\n    \n    return (\n      <div className=\"App\">\n\n        \n        <div className=\"mainContainer\">\n          <h1>huehuehue doge<i className=\"fas fa-paw\"></i></h1>\n          \n          <div className=\"imageContainer\">\n            <img src={this.state.dog.url} alt={''}></img >\n          </div>\n          <h2>{this.state.dog.name}</h2>\n          <Button /> \n        </div>    \n        \n      </div>\n    );\n\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <script src=\"https://kit.fontawesome.com/3e2ecb9775.js\" crossorigin=\"anonymous\"></script>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}